// Generated by Haxe 3.3.0
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var LMCreate = function() {
};
LMCreate.prototype = {
	entity: function() {
		return new LMEntity();
	}
	,sprite: function(path) {
		return new LMSprite(path);
	}
};
var LMEntity = function() {
	this.y = 0;
	this.x = 0;
};
LMEntity.prototype = {
	_updatePosition: function() {
	}
	,getPosition: function() {
		return [this.x,this.y];
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		this._updatePosition();
	}
	,move: function(x,y) {
		this.x += x;
		this.y += y;
		this._updatePosition();
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(n) {
		this.x = n;
		this._updatePosition();
		return this.x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(n) {
		this.y = n;
		this._updatePosition();
		return this.y;
	}
	,add: function(stage) {
	}
};
var LMInput = function() {
	this.keys = [];
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		this.keys.push(false);
	}
	window.document.onkeydown = $bind(this,this._keyDown);
	window.document.onkeyup = $bind(this,this._keyUp);
};
LMInput.prototype = {
	check: function(k) {
		k = k.toUpperCase();
		return this.keys[HxOverrides.cca(k,0)];
	}
	,_keyDown: function(e) {
		this.keys[e.keyCode] = true;
	}
	,_keyUp: function(e) {
		this.keys[e.keyCode] = false;
	}
};
var LMSprite = function(path) {
	LMEntity.call(this);
	this.texture = PIXI.Texture.fromImage(path);
	this.sprite = new PIXI.Sprite(this.texture);
};
LMSprite.__super__ = LMEntity;
LMSprite.prototype = $extend(LMEntity.prototype,{
	_updatePosition: function() {
		this.sprite.x = this.x;
		this.sprite.y = this.y;
	}
	,add: function(stage) {
		stage.addChild(this.sprite);
	}
});
var Lemming = function() {
	this.create = new LMCreate();
	this.input = new LMInput();
	window.console.log("[Lemming] Components Loaded.");
};
Lemming.get = function() {
	return new Lemming();
};
Lemming.main = function() {
};
Lemming.prototype = {
	start: function() {
		var options = { };
		options.backgroundColor = 65280;
		options.resolution = 1;
		this.stage = new PIXI.Container();
		this.renderer = PIXI.autoDetectRenderer(800,600,options);
		window.document.body.appendChild(this.renderer.view);
		window.requestAnimationFrame($bind(this,this.render));
	}
	,render: function(d) {
		if(this.update != null) {
			this.update();
		}
		this.renderer.render(this.stage);
		window.requestAnimationFrame($bind(this,this.render));
	}
	,loop: function(u) {
		this.update = u;
	}
	,log: function(msg) {
		window.console.log(msg);
	}
	,add: function(e) {
		e.add(this.stage);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Lemming.main();
